version: 0.2
env:
  variables:
    ECR_REPO: lks/course-catalog
    ECR_REGION: us-east-1
    CONTAINER_NAME: lks-course-catalog
    S3_BUCKET_NAME: lks-bebyschalke-smknega
    AWS_BUCKET_NAME: lks-bebyschalke-smknega
    DB_HOST: lks-database.cxgwabmtaqxz.us-east-1.rds.amazonaws.com
    DB_NAME: lks-postgres
    DB_PASSWORD: lkspassword
  parameter-store:
    AWS_ACCESS_KEY: /course-catalog/production/AWS_ACCESS_KEY
    AWS_SECRET_KEY: /course-catalog/production/AWS_SECRET_KEY
phases:
  install:
    runtime-versions:
      nodejs: 16
    commands:
      - echo "Install Dependencies"
      - yum update -y
  pre_build:
    commands:
      - echo "Logging into ECR..."
      - aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin 834549009763.dkr.ecr.us-east-1.amazonaws.com
      - echo "Creating S3 bucket to store dkcfg to be deployed by Beanstalk..."
      - |
        if ! aws s3api head-bucket --bucket $S3_BUCKET_NAME 2>/dev/null; then
          echo "Bucket does not exist. Creating bucket..."
          aws s3 mb s3://$S3_BUCKET_NAME
        else
          echo "Bucket already exists. Skipping creation."
        fi
      - aws s3 cp dkcfg s3://$S3_BUCKET_NAME/
      - aws s3 cp Dockerrun.aws.json s3://$S3_BUCKET_NAME/
  build:
    commands:
      - echo "Running unit tests..."
      - npm install
      - npm run test 
      - echo "Building the Docker image..."
      - docker build -t lks-catalog/bebyschalke:latest .
      - docker run -d -p 8080:8000 --name=lks-catalog/bebyschalke:latest
  post_build:
    commands:
      - echo "Pushing the image to ECR..."
      - docker tag lks-catalog/bebyschalke:latest 834549009763.dkr.ecr.us-east-1.amazonaws.com/lks-catalog/bebyschalke:latest
      - docker push 834549009763.dkr.ecr.us-east-1.amazonaws.com/lks-catalog/bebyschalke:latest
      - echo "Image has been pushed into ECR..."
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME ${ECR_REPO}:latest > imagedefinitions.json
      - echo "Build complete."
reports:
  test-report:
    files:
      - 'report/test-result.xml'
    file-format: JUNITXML
artifacts:
  files:
    - imagedefinitions.json           