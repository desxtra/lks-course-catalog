version: 0.2
env: # Create the environment
  variables:
    ECR_REPO: lks/course-catalog
    ECR_REGION: us-east-1
    CONTAINER_NAME: lks-course-catalog
phases:
  install: # Install runtime
    runtime-versions:
      nodejs: 16
    commands:
      - echo "Install Dependencies"
      - yum update -y
      - echo "Installing Docker..."
      - amazon-linux-extras install docker -y # Installing Docker
      - service docker start
      - usermod -a -G docker ec2-user 
      - echo "Docker installed and started"
      - echo "Installing nodejs v16..." # Installing nodejs v16
      - curl -sL https://rpm.nodesource.com/setup_16.x | bash -
      - yum install -y nodejs
  pre_build: # You must use this phase for installing dependencies and login into ECR
    commands: # Run your pre-build script here
      - echo "Logging into ECR..." # Login into ECR
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 834549009763.dkr.ecr.us-east-1.amazonaws.com
      - echo "Create s3 bucket to store dkcfg to be deployed by beanstalk..."
      - |
        BUCKET_NAME="lks-bebyschalke-smknega"
        if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Bucket does not exist. Creating bucket..."
          aws s3 mb s3://$BUCKET_NAME
        else
          echo "Bucket already exists. Skipping creation."
        fi
      - aws s3 cp dkcfg s3://lks-bebyschalke-smknega/
      - aws s3 cp Dockerrun.aws.jsons s3://lks-bebyschalke-smknega/ 
  build: # In This phase you must Run Unit testing and Build an image from Dockerfile
    commands:
      - echo "Run unit testing and build docker image"
      - echo "Run unit Test..." # Run unit test
      - npm install
      - npm run test 
      - echo "Showing testing result..." # Show testing result
      - npm install 
      - npm run testdev
      - echo "Run the server..." # Run course catalog that run in nodejs v16
      - npm install
      - npm run start
      - docker build -t lks-catalog/bebyschalke .
  post_build: # In this phase you must push the image to ECR and create an image definition
    commands: # Run your post-build script here
      - echo "push the image to ECR.." # Tag and push image to ECR
      - docker tag lks-catalog/bebyschalke:latest 834549009763.dkr.ecr.us-east-1.amazonaws.com/lks-catalog/bebyschalke:latest
      - docker push 834549009763.dkr.ecr.us-east-1.amazonaws.com/lks-catalog/bebyschalke:latest
      - echo "Image has been pushed into ECR..."
      - echo "Run Docker on port 8080:8000..." # Run docker
      - docker run -d -p 8080:8000 --name=course-catalog-container lks-catalog/bebyschalke:latest
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME ${ECR_REPO}:latest > imagedefinitions.json
      - echo "build complete.."
reports: # Report file
  test-report:
    files:
      - 'report/test-result.xml'
    file-format: JUNITXML
artifacts: # Output artifact will generate build
  files:
    - imagedefinitions.json